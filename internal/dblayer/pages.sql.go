// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pages.sql

package dblayer

import (
	"context"
	"time"
)

const createPage = `-- name: CreatePage :exec
INSERT INTO Pages (
    PageURL
) VALUES (
    $1
)
`

func (q *Queries) CreatePage(ctx context.Context, pageurl string) error {
	_, err := q.db.ExecContext(ctx, createPage, pageurl)
	return err
}

const increaseCommentCount = `-- name: IncreaseCommentCount :exec
UPDATE Pages
SET CommentsCount = CommentsCount + 1
WHERE PageId = $1
`

func (q *Queries) IncreaseCommentCount(ctx context.Context, pageid int32) error {
	_, err := q.db.ExecContext(ctx, increaseCommentCount, pageid)
	return err
}

const retrievePageDetails = `-- name: RetrievePageDetails :one
SELECT PageId, CommentsCount, CreatedAt
FROM Pages
WHERE PageURL = $1
`

type RetrievePageDetailsRow struct {
	Pageid        int32     `json:"pageid"`
	Commentscount int32     `json:"commentscount"`
	Createdat     time.Time `json:"createdat"`
}

func (q *Queries) RetrievePageDetails(ctx context.Context, pageurl string) (*RetrievePageDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, retrievePageDetails, pageurl)
	var i RetrievePageDetailsRow
	err := row.Scan(&i.Pageid, &i.Commentscount, &i.Createdat)
	return &i, err
}
