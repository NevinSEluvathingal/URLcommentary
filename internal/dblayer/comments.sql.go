// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package dblayer

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO Comments (
    PageId,UserId,CommentData,ParentId
) VALUES (
    $1, $2, $3, $4
)
`

type CreateCommentParams struct {
	Pageid      int32  `json:"pageid"`
	Userid      int32  `json:"userid"`
	Commentdata string `json:"commentdata"`
	Parentid    int32  `json:"parentid"`
}

func (q *Queries) CreateComment(ctx context.Context, arg *CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment,
		arg.Pageid,
		arg.Userid,
		arg.Commentdata,
		arg.Parentid,
	)
	return err
}

const retrieveNewstComments = `-- name: RetrieveNewstComments :many
SELECT CommentId, UserName, CreatedAt, EditedBool, CommentData
FROM Comments, Users
WHERE Comments.UserId = Users.UserId AND PageId = $1
ORDER BY CreatedAt DESC
LIMIT $2
`

type RetrieveNewstCommentsParams struct {
	Pageid int32 `json:"pageid"`
	Limit  int32 `json:"limit"`
}

type RetrieveNewstCommentsRow struct {
	Commentid   int32     `json:"commentid"`
	Username    string    `json:"username"`
	Createdat   time.Time `json:"createdat"`
	Editedbool  bool      `json:"editedbool"`
	Commentdata string    `json:"commentdata"`
}

func (q *Queries) RetrieveNewstComments(ctx context.Context, arg *RetrieveNewstCommentsParams) ([]*RetrieveNewstCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveNewstComments, arg.Pageid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RetrieveNewstCommentsRow
	for rows.Next() {
		var i RetrieveNewstCommentsRow
		if err := rows.Scan(
			&i.Commentid,
			&i.Username,
			&i.Createdat,
			&i.Editedbool,
			&i.Commentdata,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveOldestComments = `-- name: RetrieveOldestComments :many
SELECT CommentId, UserName, CreatedAt, EditedBool, CommentData
FROM Comments, Users
WHERE Comments.UserId = Users.UserId AND PageId = $1
ORDER BY CreatedAt ASC
LIMIT $2
`

type RetrieveOldestCommentsParams struct {
	Pageid int32 `json:"pageid"`
	Limit  int32 `json:"limit"`
}

type RetrieveOldestCommentsRow struct {
	Commentid   int32     `json:"commentid"`
	Username    string    `json:"username"`
	Createdat   time.Time `json:"createdat"`
	Editedbool  bool      `json:"editedbool"`
	Commentdata string    `json:"commentdata"`
}

func (q *Queries) RetrieveOldestComments(ctx context.Context, arg *RetrieveOldestCommentsParams) ([]*RetrieveOldestCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveOldestComments, arg.Pageid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RetrieveOldestCommentsRow
	for rows.Next() {
		var i RetrieveOldestCommentsRow
		if err := rows.Scan(
			&i.Commentid,
			&i.Username,
			&i.Createdat,
			&i.Editedbool,
			&i.Commentdata,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveSubComments = `-- name: RetrieveSubComments :many
SELECT CommentId, UserName, CreatedAt, EditedBool, CommentData
FROM Comments, Users
WHERE Comments.UserId = Users.UserId AND PageId = $1 AND ParentId = $2
ORDER BY CreatedAt DESC
LIMIT $3
`

type RetrieveSubCommentsParams struct {
	Pageid   int32 `json:"pageid"`
	Parentid int32 `json:"parentid"`
	Limit    int32 `json:"limit"`
}

type RetrieveSubCommentsRow struct {
	Commentid   int32     `json:"commentid"`
	Username    string    `json:"username"`
	Createdat   time.Time `json:"createdat"`
	Editedbool  bool      `json:"editedbool"`
	Commentdata string    `json:"commentdata"`
}

func (q *Queries) RetrieveSubComments(ctx context.Context, arg *RetrieveSubCommentsParams) ([]*RetrieveSubCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveSubComments, arg.Pageid, arg.Parentid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RetrieveSubCommentsRow
	for rows.Next() {
		var i RetrieveSubCommentsRow
		if err := rows.Scan(
			&i.Commentid,
			&i.Username,
			&i.Createdat,
			&i.Editedbool,
			&i.Commentdata,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :exec
UPDATE Comments
SET CommentData = $1, EditedBool = True
WHERE CommentId = $2
`

type UpdateCommentParams struct {
	Commentdata string `json:"commentdata"`
	Commentid   int32  `json:"commentid"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg *UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.Commentdata, arg.Commentid)
	return err
}
